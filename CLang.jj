PARSER_BEGIN(CLang)
public class CLang {

}
PARSER_END(CLang)

void Start() : {}
{
    (CheckSyntax())*
}

void CheckSyntax() : {}
{
    LOOKAHEAD( VarDef() <SEMICOLON> ) VarDef() <SEMICOLON> | Func()
}

void AllParameters() : {}
{
    Parameter() (<COMMA> Parameter())*
}

void Parameter() : {}
{
    <TYPE> <ID>
}

void Func() : {}
{
    <TYPE> <ID> <LRBRACKET> [AllParameters()] <RRBRACKET> StmtBlock()
}


void VarDef() : {}
{
    <TYPE> <ID> [VarInitAsgn()]
}

void VarAsgn() : {}
{
    <ID> <ASSIGN> Express()
}

void VarInitAsgn() : {}
{
    <ASSIGN> Express()
}

void IfStmt() : {}
{
    <IF> <LRBRACKET> Express() <RRBRACKET> (StmtBlock() | Stmt())
}

void WhileStmt() : {}
{
    <WHILE> <LRBRACKET> Express() <RRBRACKET> (StmtBlock() | Stmt())
}

void ForStmt() : {}
{
    <FOR> <LRBRACKET> VarDef() <SEMICOLON> Express() <SEMICOLON> Express() <RRBRACKET> (StmtBlock() | Stmt())
}

void ReturnStmt() : {}
{
    <RETURN> Express()
}

void Stmt() : {}
{
    VarDef() <SEMICOLON> |
    Express() <SEMICOLON> |
    IfStmt()            |
    WhileStmt()         |
    ForStmt()           |
    ReturnStmt() <SEMICOLON>
}

void StmtBlock() : {}
{
    <LCBRACKET> (Stmt())* <RCBRACKET>
}


void FuncCall() : {}
{
    <ID> <LRBRACKET> [Express() (<COMMA> Express())*] <RRBRACKET>
}

void Express() : {}
{
    LOOKAHEAD(AssignExpress()) AssignExpress() |
    BoolExpress()
}

void AssignExpress() : {}
{
    <ID> <ASSIGN> Express()
}

void BoolExpress() : {}
{
    BoolExpressOr()
}

void BoolExpressOr() : {}
{
    BoolExpressAnd() [ <OR> BoolExpressOr() ]
}

void BoolExpressAnd() : {}
{
    BoolExpressEq() [ <AND> BoolExpressAnd() ]
}

void BoolExpressEq() : {}
{
    BoolExpressComp() [ (<EQ> | <NEQ> ) BoolExpressEq() ]
}

void BoolCompOper() : {}
{

    <LT> | <LTE> | <GT> | <GTE>
}

void BoolExpressComp() : {}
{
    AddExpress() [ BoolCompOper() BoolExpressComp() ]
}

void AddExpress() : {}
{
    MultExpress() [ (<ADD> | <SUB>) AddExpress() ]
}

void MultExpress() : {}
{
    UnaExpress() [ (<MUL> | <DIV> | <MOD>) MultExpress() ]
}

void UnaExpress() : {}
{
    LOOKAHEAD(2)
    FuncCall()                               |
    ConstExpress()                            |
    <NOT> UnaExpress()                      |
    <LRBRACKET> Express() <RRBRACKET>
}

void ConstExpress() : {}
{
    <ID>                                        |
    <NUMBER>                                    |
    <CHAR_VALUE>
}

SKIP : {
 " "
|  "\t"
|  "\n"
|  "\r"
|  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
|  <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

TOKEN : {
    <TYPE: <INT> | <CHAR> | <VOID> >    |
    <IF:   "if"  >                      |
    <WHILE: "while" >                   |
    <FOR:   "for" >                     |
    <#INT: "int" >                      |
    <#CHAR: "char" >                    |
    <#VOID: "void" >                    |
    <RETURN: "return" >
}

TOKEN: {
    <ID: <LETTER> (<LETTER> | <DIGIT> | <ZERO>)* >                  |
    <NUMBER: <DIGIT> (<DIGIT> | <ZERO>)* | <ZERO> >                 |
    <CHAR_VALUE: <APSOTREPHE> (<LETTER> | <DIGIT>) <APSOTREPHE> >   |
    <#LETTER: ["a"-"z","A"-"Z"] >                                   |
    <#DIGIT: ["1"-"9"] >                                            |
    <#ZERO: "0" >
}

TOKEN: {
    <LRBRACKET: "(" > |
    <RRBRACKET: ")" > |
    <COMMA:     "," > |
    <LCBRACKET: "{" > |
    <RCBRACKET: "}" > |
    <SEMICOLON: ";" > |
    <ASSIGN:    "=" > |
    <APSOTREPHE:"'" > |
    <EQ:       "==" > |
    <LT:       "<"  > |
    <LTE:      "<=" > |
    <GT:       ">"  > |
    <GTE:      ">=" > |
    <NOT:      "!"  > |
    <NEQ:      "!=" > |
    <AND:      "&&" > |
    <OR:       "||" > |
    <ADD:       "+" > |
    <SUB:       "-" > |
    <MUL:       "*" > |
    <DIV:       "/" > |
    <MOD:       "%" >
}
