PARSER_BEGIN(CLang)
public class CLang {

}
PARSER_END(CLang)

SKIP : {
 " "
|  "\t"
|  "\n"
|  "\r"
|  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
|  <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

TOKEN : {
    <TYPE: <INT> | <CHAR> | <VOID> >    |
    <IF:   "if"  >                      |
    <WHILE: "while" >                   |
    <FOR:   "for" >                     |
    <#INT: "int" >                      |
    <#CHAR: "char" >                    |
    <#VOID: "void" >                    |
    <RETURN: "return" >
}

TOKEN: {
    <ID: <LETTER> (<LETTER> | <DIGIT> | <ZERO>)* >                  |
    <NUMBER: <DIGIT> (<DIGIT> | <ZERO>)* | <ZERO> >                          |
    <CHAR_VALUE: <APSOTREPHE> (<LETTER> | <DIGIT>) <APSOTREPHE> >   |
    <#LETTER: ["a"-"z","A"-"Z"] >                                   |
    <#DIGIT: ["1"-"9"] >                                            |
    <#ZERO: "0" >
}

TOKEN: {
    <LRBRACKET: "(" > |
    <RRBRACKET: ")" > |
    <COMMA:     "," > |
    <LCBRACKET: "{" > |
    <RCBRACKET: "}" > |
    <SEMICOLON: ";" > |
    <ASSIGN:    "=" > |
    <APSOTREPHE:"'" > |
    <EQ:       "==" > |
    <LT:       "<"  > |
    <LTE:      "<=" > |
    <GT:       ">"  > |
    <GTE:      ">=" > |
    <NOT:      "!"  > |
    <NEQ:      "!=" > |
    <AND:      "&&" > |
    <OR:       "||" > |
    <ADD:       "+" > |
    <SUB:       "-" > |
    <MUL:       "*" > |
    <DIV:       "/" > |
    <MOD:       "%" >
}

void Start() : {}
{
    (sourceCode())*
}

void sourceCode() : {}
{
    LOOKAHEAD( varDefine() <SEMICOLON> ) varDefine() <SEMICOLON> | function()
}

void paramList() : {}
{
    param() (<COMMA> param())*
}

void param() : {}
{
    <TYPE> <ID>
}

void function() : {}
{
    <TYPE> <ID> <LRBRACKET> [paramList()] <RRBRACKET> StatementBlock()
}

void varAssignInInit() : {}
{
    <ASSIGN> expression()
}

void varAssign() : {}
{
    <ID> <ASSIGN> expression()
}

void varDefine() : {}
{
    <TYPE> <ID> [varAssignInInit()]
}


void StatementBlock() : {}
{
    <LCBRACKET> (Statement())* <RCBRACKET>
}

void Statement() : {}
{
    varDefine() <SEMICOLON> |
    expression() <SEMICOLON> |
    IfStatement()            |
    WhileStatement()         |
    ForStatement()           |
    ReturnStatement() <SEMICOLON>
}

void IfStatement() : {}
{
    <IF> <LRBRACKET> expression() <RRBRACKET> (StatementBlock() | Statement())
}

void WhileStatement() : {}
{
    <WHILE> <LRBRACKET> expression() <RRBRACKET> (StatementBlock() | Statement())
}

void ForStatement() : {}
{
    <FOR> <LRBRACKET> varDefine() <SEMICOLON> expression() <SEMICOLON> expression() <RRBRACKET> (StatementBlock() | Statement())
}

void ReturnStatement() : {}
{
    <RETURN> expression()
}

void expression() : {}
{
    LOOKAHEAD(assignExpression()) assignExpression() |
    boolExpression()
}

void functionCall() : {}
{
    <ID> <LRBRACKET> [expression() (<COMMA> expression())*] <RRBRACKET>
}

void assignExpression() : {}
{
    <ID> <ASSIGN> expression()
}

void boolExpression() : {}
{
    binaryBoolExpressionOr()
}

void binaryBoolExpressionOr() : {}
{
    binaryBoolExpressionAnd() [ <OR> binaryBoolExpressionOr() ]
}

void binaryBoolExpressionAnd() : {}
{
    binaryExpressionEq() [ <AND> binaryBoolExpressionAnd() ]
}

void binaryExpressionEq() : {}
{
    binaryBoolExpressionCompare() [ (<EQ> | <NEQ> ) binaryExpressionEq() ]
}

void binaryBoolOperatorCompare() : {}
{

    <LT> | <LTE> | <GT> | <GTE>
}

void binaryBoolExpressionCompare() : {}
{
    addExpression() [ binaryBoolOperatorCompare() binaryBoolExpressionCompare() ]
}

void addExpression() : {}
{
    mulExpression() [ (<ADD> | <SUB>) addExpression() ]
}

void mulExpression() : {}
{
    unaryExpression() [ (<MUL> | <DIV> | <MOD>) mulExpression() ]
}

void unaryExpression() : {}
{
    LOOKAHEAD(2)
    functionCall() |
    constExpression() |
    <NOT> unaryExpression()                      |
    <LRBRACKET> expression() <RRBRACKET>


}

void constExpression() : {}
{
    <ID>                                        |
    <NUMBER>                                    |
    <CHAR_VALUE>
}

